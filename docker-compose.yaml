version: "3.5"

services:
  api01: &api
    build: .
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PORT=4001
      - DATABASE_URL=postgresql://rinha2:rinha2@db:5432/rinha2
    ports:
      - "4001:3000"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "150MB"

  api02:
    # Essa sintaxe reusa o que foi declarado em 'api01'.
    <<: *api
    hostname: api02
    environment:
      - PORT=4002
      - DATABASE_URL=postgresql://rinha2:rinha2@db:5432/rinha2
    ports:
      - "4002:3000"

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    ports:
      # Obrigatório expor/usar a porta 9999 no load balancer!
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "50MB"
  db:
    image: postgres:latest
    hostname: db
    environment:
      - POSTGRES_PASSWORD=rinha2
      - POSTGRES_USER=rinha2
      - POSTGRES_DB=rinha2
    ports:
      - "5432:5432"
    volumes:
        # - ./init.sql:/docker-entrypoint-initdb.d/init.sql
        - ./postgresql.conf:/docker-entrypoint-initdb.d/postgresql.conf
    command: postgres -c config_file=/docker-entrypoint-initdb.d/postgresql.conf
    deploy:
      resources:
        limits:
          cpus: "0.4"
          memory: "200MB"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U rinha2 -d rinha2" ]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s

    # O uso do modo `bridge` deve ser adequado à carga que será usada no teste.
    # A edição anterior se beneficiou do modo host pois o volume de requisições
    # era relativamente alto e a virtualização da rede se tornou um gargalo, mas
    # este modo é mais complexo de ser configurado. Fique à vontade para usar o
    # modo que quiser desde que não conflite com portas trivialmente usadas em um
    # SO.
networks:
  default:
    driver: bridge
    name: rinha-nginx-2024q1